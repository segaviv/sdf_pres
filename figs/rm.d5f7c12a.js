const vsSource="attribute vec4 aVertexPosition; void main(){gl_Position = aVertexPosition;}",fsSource="\n    precision highp float;\n    uniform vec2 res;\n\n    float sdSphere(float r, vec3 p) {\n      return length(p) - r;\n    }\n\n    vec4 map(vec3 ro, vec3 rd) {\n      float depth = 0.;\n      for (int i = 0; i < 50; i++) {\n        vec3 p = ro + depth * rd;\n        float dist = sdSphere(1., p - vec3(0., 0., 0.));\n        if (dist < 1e-4) {\n          return vec4(1.0);\n        }\n        depth += dist;\n      }\n      return vec4(0.0);\n    }\n\n    void main() {\n      vec2 p = (gl_FragCoord.xy / res - 0.5) * 2.;\n      p.x *= res.x / res.y;\n\n      vec3 ro = vec3(0.0, 0.0, 2.0);\n      vec3 rd = normalize(vec3(p, -1.2));\n      float res = map(ro, rd).x;\n      gl_FragColor = vec4(res, res, 0.0, 1.0);\n    }\n  ";function initBuffers(e){const r=e.createBuffer();e.bindBuffer(e.ARRAY_BUFFER,r);return e.bufferData(e.ARRAY_BUFFER,new Float32Array([1,1,-1,1,1,-1,-1,-1]),e.STATIC_DRAW),{position:r}}function initShaderProgram(e,r,t){const n=loadShader(e,e.VERTEX_SHADER,r),o=loadShader(e,e.FRAGMENT_SHADER,t),i=e.createProgram();return e.attachShader(i,n),e.attachShader(i,o),e.linkProgram(i),e.getProgramParameter(i,e.LINK_STATUS)?i:(console.log("Unable to initialize the shader program: "+e.getProgramInfoLog(i)),null)}function loadShader(e,r,t){const n=e.createShader(r);return e.shaderSource(n,t),e.compileShader(n),e.getShaderParameter(n,e.COMPILE_STATUS)?n:(console.log("An error occurred compiling the shaders: "+e.getShaderInfoLog(n)),e.deleteShader(n),null)}function drawScene(e,r,t,n){r.clearColor(0,0,0,1),r.clear(r.COLOR_BUFFER_BIT);{const e=2,o=r.FLOAT,i=!1,a=0,c=0;r.bindBuffer(r.ARRAY_BUFFER,n.position),r.vertexAttribPointer(t.attribLocations.vertexPosition,e,o,i,a,c),r.enableVertexAttribArray(t.attribLocations.vertexPosition)}r.useProgram(t.program),r.uniform2f(t.uniformLocations.res,e.width,e.height);{const e=0,t=4;r.drawArrays(r.TRIANGLE_STRIP,e,t)}}function init(){const e=document.getElementById("canvas");e.width=e.clientWidth,e.height=e.clientHeight;const r=e.getContext("webgl"),t=initShaderProgram(r,vsSource,fsSource),n={program:t,attribLocations:{vertexPosition:r.getAttribLocation(t,"aVertexPosition")},uniformLocations:{res:r.getUniformLocation(t,"res")}};drawScene(e,r,n,initBuffers(r))}init();
//# sourceMappingURL=rm.d5f7c12a.js.map
