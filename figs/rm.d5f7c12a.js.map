{"mappings":"AAAA,MAAMA,SACJ,8EAEIC,SAAW,8tBAgCjB,SAASC,YAAYC,GACnB,MAAMC,EAAiBD,EAAGE,eAC1BF,EAAGG,WAAWH,EAAGI,aAAcH,GAG/B,OADAD,EAAGK,WAAWL,EAAGI,aAAc,IAAIE,aADjB,CAAC,EAAK,GAAK,EAAM,EAAK,GAAK,GAAM,GAAM,IACGN,EAAGO,aACxD,CAAEC,SAAUP,E,CAErB,SAASQ,kBAAkBT,EAAIH,EAAUC,GACvC,MAAMY,EAAeC,WAAWX,EAAIA,EAAGY,cAAef,GAChDgB,EAAiBF,WAAWX,EAAIA,EAAGc,gBAAiBhB,GACpDiB,EAAgBf,EAAGgB,gBAIzB,OAHAhB,EAAGiB,aAAaF,EAAeL,GAC/BV,EAAGiB,aAAaF,EAAeF,GAC/Bb,EAAGkB,YAAYH,GACVf,EAAGmB,oBAAoBJ,EAAef,EAAGoB,aAIvCL,GAHLM,QAAQC,IAAI,4CAA8CtB,EAAGuB,kBAAkBR,IACxE,K,CAIX,SAASJ,WAAWX,EAAIwB,EAAMC,GAC5B,MAAMC,EAAS1B,EAAG2B,aAAaH,GAG/B,OAFAxB,EAAG4B,aAAaF,EAAQD,GACxBzB,EAAG6B,cAAcH,GACZ1B,EAAG8B,mBAAmBJ,EAAQ1B,EAAG+B,gBAK/BL,GAJLL,QAAQC,IAAI,4CAA8CtB,EAAGgC,iBAAiBN,IAC9E1B,EAAGiC,aAAaP,GACT,K,CAIX,SAASQ,UAAUC,EAAQnC,EAAIoC,EAAaC,GAC1CrC,EAAGsC,WAAW,EAAK,EAAK,EAAK,GAC7BtC,EAAGuC,MAAMvC,EAAGwC,kBAEZ,CACE,MAAMC,EAAgB,EAChBjB,EAAOxB,EAAG0C,MACVC,GAAY,EACZC,EAAS,EACTC,EAAS,EACf7C,EAAGG,WAAWH,EAAGI,aAAciC,EAAQ7B,UACvCR,EAAG8C,oBACCV,EAAYW,gBAAgBC,eAC5BP,EACAjB,EACAmB,EACAC,EACAC,GACJ7C,EAAGiD,wBACCb,EAAYW,gBAAgBC,e,CAElChD,EAAGkD,WAAWd,EAAYe,SAC1BnD,EAAGoD,UAAUhB,EAAYiB,iBAAiBC,IAAKnB,EAAOoB,MAAOpB,EAAOqB,QACpE,CACE,MAAMC,EAAS,EACTC,EAAc,EACpB1D,EAAG2D,WAAW3D,EAAG4D,eAAgBH,EAAQC,E,EAI7C,SAASG,OACP,MAAM1B,EAAS2B,SAASC,eAAe,UACvC5B,EAAOoB,MAAQpB,EAAO6B,YACtB7B,EAAOqB,OAASrB,EAAO8B,aACvB,MAAMjE,EAAKmC,EAAO+B,WAAW,SACvBnD,EAAgBN,kBAAkBT,EAAIH,SAAUC,UAChDsC,EAAc,CAClBe,QAASpC,EACTgC,gBAAiB,CACfC,eAAgBhD,EAAGmE,kBAAkBpD,EAAe,oBAEtDsC,iBAAkB,CAChBC,IAAKtD,EAAGoE,mBAAmBrD,EAAe,SAI9CmB,UAAUC,EAAQnC,EAAIoC,EADNrC,YAAYC,G,CAI9B6D","sources":["figs/rm.js"],"sourcesContent":["const vsSource =\n  \"attribute vec4 aVertexPosition; void main(){gl_Position = aVertexPosition;}\";\n\nconst fsSource = `\n    precision highp float;\n    uniform vec2 res;\n\n    float sdSphere(float r, vec3 p) {\n      return length(p) - r;\n    }\n\n    vec4 map(vec3 ro, vec3 rd) {\n      float depth = 0.;\n      for (int i = 0; i < 50; i++) {\n        vec3 p = ro + depth * rd;\n        float dist = sdSphere(1., p - vec3(0., 0., 0.));\n        if (dist < 1e-4) {\n          return vec4(1.0);\n        }\n        depth += dist;\n      }\n      return vec4(0.0);\n    }\n\n    void main() {\n      vec2 p = (gl_FragCoord.xy / res - 0.5) * 2.;\n      p.x *= res.x / res.y;\n\n      vec3 ro = vec3(0.0, 0.0, 2.0);\n      vec3 rd = normalize(vec3(p, -1.2));\n      float res = map(ro, rd).x;\n      gl_FragColor = vec4(res, res, 0.0, 1.0);\n    }\n  `;\n\nfunction initBuffers(gl) {\n  const positionBuffer = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n  const positions = [1.0, 1.0, -1.0, 1.0, 1.0, -1.0, -1.0, -1.0];\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW);\n  return { position: positionBuffer };\n}\nfunction initShaderProgram(gl, vsSource, fsSource) {\n  const vertexShader = loadShader(gl, gl.VERTEX_SHADER, vsSource);\n  const fragmentShader = loadShader(gl, gl.FRAGMENT_SHADER, fsSource);\n  const shaderProgram = gl.createProgram();\n  gl.attachShader(shaderProgram, vertexShader);\n  gl.attachShader(shaderProgram, fragmentShader);\n  gl.linkProgram(shaderProgram);\n  if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {\n    console.log('Unable to initialize the shader program: ' + gl.getProgramInfoLog(shaderProgram));\n    return null;\n  }\n  return shaderProgram;\n}\nfunction loadShader(gl, type, source) {\n  const shader = gl.createShader(type);\n  gl.shaderSource(shader, source);\n  gl.compileShader(shader);\n  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n    console.log('An error occurred compiling the shaders: ' + gl.getShaderInfoLog(shader));\n    gl.deleteShader(shader);\n    return null;\n  }\n  return shader;\n}\nfunction drawScene(canvas, gl, programInfo, buffers) {\n  gl.clearColor(0.0, 0.0, 0.0, 1.0);\n  gl.clear(gl.COLOR_BUFFER_BIT);\n\n  {\n    const numComponents = 2;\n    const type = gl.FLOAT;\n    const normalize = false;\n    const stride = 0;\n    const offset = 0;\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffers.position);\n    gl.vertexAttribPointer(\n        programInfo.attribLocations.vertexPosition,\n        numComponents,\n        type,\n        normalize,\n        stride,\n        offset);\n    gl.enableVertexAttribArray(\n        programInfo.attribLocations.vertexPosition);\n  }\n  gl.useProgram(programInfo.program);\n  gl.uniform2f(programInfo.uniformLocations.res, canvas.width, canvas.height);\n  {\n    const offset = 0;\n    const vertexCount = 4;\n    gl.drawArrays(gl.TRIANGLE_STRIP, offset, vertexCount);\n  }\n}\n\nfunction init() {\n  const canvas = document.getElementById(\"canvas\");\n  canvas.width = canvas.clientWidth;\n  canvas.height = canvas.clientHeight;\n  const gl = canvas.getContext(\"webgl\");\n  const shaderProgram = initShaderProgram(gl, vsSource, fsSource);\n  const programInfo = {\n    program: shaderProgram,\n    attribLocations: {\n      vertexPosition: gl.getAttribLocation(shaderProgram, 'aVertexPosition'),\n    },\n    uniformLocations: {\n      res: gl.getUniformLocation(shaderProgram, 'res'),\n    },\n  };\n  const buffers = initBuffers(gl);\n  drawScene(canvas, gl, programInfo, buffers);\n}\n\ninit();"],"names":["vsSource","fsSource","initBuffers","gl","positionBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","position","initShaderProgram","vertexShader","loadShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","shaderProgram","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","console","log","getProgramInfoLog","type","source","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","deleteShader","drawScene","canvas","programInfo","buffers","clearColor","clear","COLOR_BUFFER_BIT","numComponents","FLOAT","normalize","stride","offset","vertexAttribPointer","attribLocations","vertexPosition","enableVertexAttribArray","useProgram","program","uniform2f","uniformLocations","res","width","height","offset1","vertexCount","drawArrays","TRIANGLE_STRIP","init","document","getElementById","clientWidth","clientHeight","getContext","getAttribLocation","getUniformLocation"],"version":3,"file":"rm.d5f7c12a.js.map"}